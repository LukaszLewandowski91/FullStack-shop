// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(uuid())
  title String @unique
  description String
  price String
  producer String
  category Categories @relation(fields: [categoryId], references: [id])
  categoryId String @unique

  gallery Images[]
  orders OrderDetails[]
}
model Categories {
  id String @id @default(uuid())
  description String @unique
  products Product?
  image String
}
model Images {
  id String @id @default(uuid())
  image String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String 
}

model Order {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  city String
  phoneNumber String
  email String 
  deliveryType String
  amountPay Float
  amountProducts Int
  client User @relation(fields: [userId], references: [id])
  userId String

  order OrderDetails[] 
  
}

model OrderDetails {
  id String @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
}


enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(uuid())
  email String @unique
  role Role @default(USER)
  password Password?

  orders Order[]
}

model Password {
  id String @id @default(uuid())
  hashedPassword String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade )
  userId String @unique
}